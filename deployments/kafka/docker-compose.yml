version: '3.8'

services:
  # Zookeeper for Kafka coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: yieldsensei-zookeeper
    hostname: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: INFO
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafka-network

  # Kafka Broker 1
  kafka-broker-1:
    image: confluentinc/cp-kafka:7.5.0
    container_name: yieldsensei-kafka-1
    hostname: kafka-broker-1
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"  # JMX port
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-broker-1:29092
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 3
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_LOG_RETENTION_HOURS: 168  # 7 days
      KAFKA_LOG_SEGMENT_BYTES: 1073741824  # 1GB
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000  # 5 minutes
      KAFKA_MESSAGE_MAX_BYTES: 10485760  # 10MB for large DeFi data
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10485760
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 16
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_NUM_PARTITIONS: 12  # Good for DeFi workloads
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: 'false'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka-broker-1-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - kafka-network

  # Kafka Broker 2
  kafka-broker-2:
    image: confluentinc/cp-kafka:7.5.0
    container_name: yieldsensei-kafka-2
    hostname: kafka-broker-2
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9093:9093"
      - "9102:9102"  # JMX port
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-2:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-broker-2:29093
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 3
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_MESSAGE_MAX_BYTES: 10485760
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10485760
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 16
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_NUM_PARTITIONS: 12
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: 'false'
      KAFKA_JMX_PORT: 9102
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka-broker-2-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9093"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - kafka-network

  # Kafka Broker 3
  kafka-broker-3:
    image: confluentinc/cp-kafka:7.5.0
    container_name: yieldsensei-kafka-3
    hostname: kafka-broker-3
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9094:9094"
      - "9103:9103"  # JMX port
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-3:29094,PLAINTEXT_HOST://localhost:9094
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-broker-3:29094
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 3
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_MESSAGE_MAX_BYTES: 10485760
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10485760
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 16
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_NUM_PARTITIONS: 12
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: 'false'
      KAFKA_JMX_PORT: 9103
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka-broker-3-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9094"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - kafka-network

  # Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: yieldsensei-schema-registry
    hostname: schema-registry
    restart: unless-stopped
    depends_on:
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-broker-1:29092,kafka-broker-2:29093,kafka-broker-3:29094'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 3
      SCHEMA_REGISTRY_DEBUG: 'true'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - kafka-network

  # Kafka Connect for Database Integration
  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.5.0
    container_name: yieldsensei-kafka-connect
    hostname: kafka-connect
    restart: unless-stopped
    depends_on:
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka-broker-1:29092,kafka-broker-2:29093,kafka-broker-3:29094'
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: yieldsensei-connect-cluster
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      # Performance tuning for DeFi workloads
      CONNECT_CONSUMER_MAX_POLL_RECORDS: 1000
      CONNECT_CONSUMER_MAX_POLL_INTERVAL_MS: 300000
      CONNECT_CONSUMER_SESSION_TIMEOUT_MS: 30000
      CONNECT_PRODUCER_BATCH_SIZE: 65536
      CONNECT_PRODUCER_LINGER_MS: 100
      CONNECT_PRODUCER_BUFFER_MEMORY: 67108864
      CONNECT_TASK_SHUTDOWN_GRACEFUL_TIMEOUT_MS: 30000
    volumes:
      - ./connectors:/usr/share/confluent-hub-components
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - kafka-network

  # Kafka Control Center (UI for monitoring and management)
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.5.0
    container_name: yieldsensei-control-center
    hostname: control-center
    restart: unless-stopped
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
      - schema-registry
      - kafka-connect
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka-broker-1:29092,kafka-broker-2:29093,kafka-broker-3:29094'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'kafka-connect:8083'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 3
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 3
      PORT: 9021
    volumes:
      - control-center-data:/var/lib/confluent-control-center
    networks:
      - kafka-network

  # KSQL Server for stream processing
  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.5.0
    container_name: yieldsensei-ksqldb-server
    hostname: ksqldb-server
    restart: unless-stopped
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
      - kafka-connect
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "kafka-broker-1:29092,kafka-broker-2:29093,kafka-broker-3:29094"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://kafka-connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 3
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
    volumes:
      - ksqldb-data:/var/lib/ksqldb
    networks:
      - kafka-network

  # KSQL CLI
  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:7.5.0
    container_name: yieldsensei-ksqldb-cli
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    networks:
      - kafka-network

  # Kafdrop for Kafka UI
  kafdrop:
    image: obsidiandynamics/kafdrop:3.31.0
    container_name: yieldsensei-kafdrop
    restart: unless-stopped
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka-broker-1:29092,kafka-broker-2:29093,kafka-broker-3:29094
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
      SCHEMAREGISTRY_CONNECT: http://schema-registry:8081
    networks:
      - kafka-network

  # Kafka Lag Exporter for monitoring
  kafka-lag-exporter:
    image: lightbend/kafka-lag-exporter:0.8.2
    container_name: yieldsensei-lag-exporter
    restart: unless-stopped
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
    ports:
      - "8000:8000"
    volumes:
      - ./config/lag-exporter:/opt/docker/conf
    networks:
      - kafka-network

  # Topic initializer
  kafka-topics-init:
    image: confluentinc/cp-kafka:7.5.0
    container_name: yieldsensei-topics-init
    depends_on:
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    command: |
      bash -c '
        echo "Waiting for Kafka cluster to be ready..."
        kafka-topics --bootstrap-server kafka-broker-1:29092 --list
        
        echo "Creating YieldSensei topics..."
        
        # Core DeFi data streams
        kafka-topics --create --if-not-exists --bootstrap-server kafka-broker-1:29092 --partitions 12 --replication-factor 3 --topic defi.protocols
        kafka-topics --create --if-not-exists --bootstrap-server kafka-broker-1:29092 --partitions 12 --replication-factor 3 --topic defi.tokens
        kafka-topics --create --if-not-exists --bootstrap-server kafka-broker-1:29092 --partitions 24 --replication-factor 3 --topic defi.transactions
        kafka-topics --create --if-not-exists --bootstrap-server kafka-broker-1:29092 --partitions 12 --replication-factor 3 --topic defi.liquidity-pools
        kafka-topics --create --if-not-exists --bootstrap-server kafka-broker-1:29092 --partitions 6 --replication-factor 3 --topic defi.yields
        
        # Market data streams
        kafka-topics --create --if-not-exists --bootstrap-server kafka-broker-1:29092 --partitions 12 --replication-factor 3 --topic market.prices
        kafka-topics --create --if-not-exists --bootstrap-server kafka-broker-1:29092 --partitions 6 --replication-factor 3 --topic market.analytics
        kafka-topics --create --if-not-exists --bootstrap-server kafka-broker-1:29092 --partitions 6 --replication-factor 3 --topic market.sentiment
        
        # User and system events
        kafka-topics --create --if-not-exists --bootstrap-server kafka-broker-1:29092 --partitions 6 --replication-factor 3 --topic users.events
        kafka-topics --create --if-not-exists --bootstrap-server kafka-broker-1:29092 --partitions 6 --replication-factor 3 --topic users.portfolios
        kafka-topics --create --if-not-exists --bootstrap-server kafka-broker-1:29092 --partitions 3 --replication-factor 3 --topic system.alerts
        kafka-topics --create --if-not-exists --bootstrap-server kafka-broker-1:29092 --partitions 3 --replication-factor 3 --topic system.metrics
        
        # Risk management streams
        kafka-topics --create --if-not-exists --bootstrap-server kafka-broker-1:29092 --partitions 6 --replication-factor 3 --topic risk.assessments
        kafka-topics --create --if-not-exists --bootstrap-server kafka-broker-1:29092 --partitions 6 --replication-factor 3 --topic risk.alerts
        
        # Cross-chain data
        kafka-topics --create --if-not-exists --bootstrap-server kafka-broker-1:29092 --partitions 12 --replication-factor 3 --topic crosschain.events
        kafka-topics --create --if-not-exists --bootstrap-server kafka-broker-1:29092 --partitions 6 --replication-factor 3 --topic crosschain.arbitrage
        
        echo "All topics created successfully!"
        kafka-topics --bootstrap-server kafka-broker-1:29092 --list
      '
    networks:
      - kafka-network

volumes:
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
  kafka-broker-1-data:
    driver: local
  kafka-broker-2-data:
    driver: local
  kafka-broker-3-data:
    driver: local
  control-center-data:
    driver: local
  ksqldb-data:
    driver: local

networks:
  kafka-network:
    driver: bridge
    name: yieldsensei-kafka-network 