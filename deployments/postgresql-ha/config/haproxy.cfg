#---------------------------------------------------------------------
# YieldSensei PostgreSQL HAProxy Configuration
# Provides intelligent routing between primary and replica PostgreSQL nodes
#---------------------------------------------------------------------

global
    maxconn 4096
    log stdout local0
    stats socket /var/run/haproxy.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon
    
    # SSL/TLS settings for future HTTPS support
    ssl-default-bind-ciphers ECDHE+aes128gcm:ECDHE+aes256gcm:ECDHE+aes128sha256:ECDHE+aes256sha384:ECDHE+sha256:ECDHE+sha384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    mode tcp
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout check 5000ms
    log global
    option tcplog
    option dontlognull
    option tcp-check
    retries 3
    
    # Connection limits
    maxconn 2000

#---------------------------------------------------------------------
# Statistics and monitoring page
#---------------------------------------------------------------------
listen stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 30s
    stats show-node
    stats show-legends
    stats show-desc PostgreSQL Cluster Stats
    
    # Authentication for stats page
    stats auth admin:yieldsensei-stats
    
    # Additional stats endpoints
    stats admin if TRUE
    http-request use-service prometheus-exporter if { path /metrics }

#---------------------------------------------------------------------
# Frontend for write operations (Primary only)
#---------------------------------------------------------------------
frontend postgres_write
    bind *:5432
    mode tcp
    option tcplog
    default_backend postgres_primary
    
    # Connection rate limiting
    stick-table type ip size 100k expire 30s store conn_rate(3s)
    tcp-request connection track-sc0 src
    tcp-request connection reject if { sc_conn_rate(0) gt 20 }

#---------------------------------------------------------------------
# Frontend for read operations (Replicas with primary fallback)
#---------------------------------------------------------------------
frontend postgres_read
    bind *:5433
    mode tcp
    option tcplog
    default_backend postgres_replicas

#---------------------------------------------------------------------
# Backend for write operations (Primary PostgreSQL node)
#---------------------------------------------------------------------
backend postgres_primary
    mode tcp
    option tcp-check
    
    # Health check using Patroni REST API
    tcp-check connect port 8008
    tcp-check send-binary 474554202f20485454502f312e310d0a486f73743a206c6f63616c686f73740d0a0d0a
    tcp-check expect string "HTTP/1.1 200"
    tcp-check connect port 5432
    
    # Advanced health check using SQL query
    option pgsql-check user patroni
    
    # Load balancing algorithm
    balance first
    
    # Primary server - only route here if it's the current leader
    server postgres-primary postgres-primary:5432 check port 8008 inter 5s fastinter 2s downinter 8s rise 3 fall 2 maxconn 100 weight 100
    
    # Fallback to replicas if primary is down (for read-heavy scenarios)
    server postgres-replica1 postgres-replica1:5432 check port 8008 inter 10s backup maxconn 50 weight 50
    server postgres-replica2 postgres-replica2:5432 check port 8008 inter 10s backup maxconn 50 weight 50

#---------------------------------------------------------------------
# Backend for read operations (Replica PostgreSQL nodes)
#---------------------------------------------------------------------
backend postgres_replicas
    mode tcp
    option tcp-check
    
    # Health check for replicas using Patroni REST API
    tcp-check connect port 8008
    tcp-check send-binary 474554202f20485454502f312e310d0a486f73743a206c6f63616c686f73740d0a0d0a
    tcp-check expect string "HTTP/1.1 200"
    tcp-check connect port 5432
    
    # Advanced health check using SQL query
    option pgsql-check user patroni
    
    # Load balancing algorithm for read traffic
    balance leastconn
    
    # Replica servers for read operations
    server postgres-replica1 postgres-replica1:5432 check port 8008 inter 5s fastinter 2s downinter 8s rise 3 fall 2 maxconn 100 weight 100
    server postgres-replica2 postgres-replica2:5432 check port 8008 inter 5s fastinter 2s downinter 8s rise 3 fall 2 maxconn 100 weight 100
    
    # Fallback to primary if all replicas are down
    server postgres-primary postgres-primary:5432 check port 8008 inter 10s backup maxconn 50 weight 50

#---------------------------------------------------------------------
# Backend for Patroni API access (monitoring and management)
#---------------------------------------------------------------------
backend patroni_api
    mode http
    balance roundrobin
    option httpchk GET /
    
    server patroni-primary postgres-primary:8008 check inter 5s fall 2 rise 3
    server patroni-replica1 postgres-replica1:8008 check inter 5s fall 2 rise 3
    server patroni-replica2 postgres-replica2:8008 check inter 5s fall 2 rise 3

#---------------------------------------------------------------------
# Frontend for Patroni API (management interface)
#---------------------------------------------------------------------
frontend patroni_api_frontend
    bind *:8008
    mode http
    default_backend patroni_api
    
    # Security: Only allow specific operations
    http-request deny if { method POST } !{ path_beg /restart } !{ path_beg /reload } !{ path_beg /reinitialize }
    
    # Rate limiting for API calls
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request tarpit if { sc_http_req_rate(0) gt 10 }

#---------------------------------------------------------------------
# Advanced health checks and monitoring
#---------------------------------------------------------------------

# Custom health check script for PostgreSQL replication lag
backend postgres_lag_check
    mode http
    option httpchk GET /lag-check
    server lag-checker postgres-health-checker:8080 check inter 30s

# Email alerts configuration (requires external SMTP setup)
email-alert mailers mymailers
    mailer smtp1 localhost:587

email-alert from haproxy@yieldsensei.local
email-alert to devops@yieldsensei.local
email-alert level alert

#---------------------------------------------------------------------
# Logging configuration
#---------------------------------------------------------------------
log-tag haproxy-postgres

# Custom log format for PostgreSQL connections
capture request header Host len 32
capture request header User-Agent len 64

#---------------------------------------------------------------------
# Error pages and customization
#---------------------------------------------------------------------
errorfile 400 /etc/haproxy/errors/400.http
errorfile 403 /etc/haproxy/errors/403.http
errorfile 408 /etc/haproxy/errors/408.http
errorfile 500 /etc/haproxy/errors/500.http
errorfile 502 /etc/haproxy/errors/502.http
errorfile 503 /etc/haproxy/errors/503.http
errorfile 504 /etc/haproxy/errors/504.http 