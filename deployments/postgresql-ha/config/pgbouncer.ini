;; YieldSensei PostgreSQL Connection Pooling Configuration
;; Optimized for high-frequency DeFi transactions and analytics workloads

[databases]
; Primary database for write operations
yieldsensei = host=haproxy port=5432 dbname=yieldsensei user=yieldsensei_app password=changeme_in_production pool_size=20 reserve_pool=5

; Read-only database for analytics (routed to replicas)
yieldsensei_read = host=haproxy port=5433 dbname=yieldsensei user=yieldsensei_app password=changeme_in_production pool_size=30 reserve_pool=5

; Admin database for maintenance operations
yieldsensei_admin = host=haproxy port=5432 dbname=yieldsensei user=postgres password=changeme_in_production pool_size=5 reserve_pool=2

; Test database for development
yieldsensei_test = host=haproxy port=5432 dbname=yieldsensei_test user=yieldsensei_app password=changeme_in_production pool_size=10

[pgbouncer]
;;;
;;; Administrative settings
;;;

; User to run pgbouncer as
;user = pgbouncer

; Pooler personality questions
pool_mode = transaction
listen_port = 6432
listen_addr = 0.0.0.0
auth_type = md5
auth_file = /etc/pgbouncer/userlist.txt

; Administrator users
admin_users = postgres, yieldsensei_admin

; Users allowed to use SHOW commands
stats_users = postgres, yieldsensei_app, yieldsensei_admin

;;;
;;; Connection limits
;;;

; Total number of clients that can connect
max_client_conn = 1000

; Default pool size per database/user combination
default_pool_size = 20

; Minimum number of server connections to keep in pool
min_pool_size = 5

; Reserve pool: pool_size + reserve_pool_size = max connections for the database/user
reserve_pool_size = 5

; How many additional connections to allow in case of trouble
reserve_pool_timeout = 5

; Maximum connections per database
max_db_connections = 100

; Maximum connections per user
max_user_connections = 100

; If off, then server connections are reused in LIFO manner
server_round_robin = 1

;;;
;;; Logging
;;;

; Syslog settings
syslog = 0
syslog_facility = daemon
syslog_ident = pgbouncer

; log if client connects or server connection is made
log_connections = 1

; log if and why connection was closed
log_disconnections = 1

; log error messages pooler sends to clients
log_pooler_errors = 1

; write aggregated stats to log
log_stats = 1

; Logging verbosity: 0=off 1=emergency 2=alert 3=critical 4=error 5=warning 6=notice 7=info 8=debug
verbose = 5

;;;
;;; Connection sanity checks, timeouts
;;;

; Close server connection if its been connected longer
server_lifetime = 3600

; Close server connection if its been idle more than this many seconds
server_idle_timeout = 600

; Cancel connection attempt if server does not answer takes longer
server_connect_timeout = 15

; If server login failed (server_connect_timeout or auth failed) then wait this many seconds before trying again
server_login_retry = 15

; Dangerous. When set, server connections are dropped before giving them to clients.
; server_reset_query = DISCARD ALL

; Close client connection if its been idle more than this many seconds
client_idle_timeout = 0

; Client is booted after this many seconds of client_idle_timeout
client_login_timeout = 60

; Disconnect clients who have not managed to log in after connecting in this many seconds
autodb_idle_timeout = 3600

; How long to wait before retrying to do DNS lookup for host names
dns_max_ttl = 15

; How frequently to check for DNS changes
dns_nxdomain_ttl = 15

;;;
;;; TLS settings for connections between PgBouncer and PostgreSQL servers
;;;

; TLS support disabled for internal cluster communication
;server_tls_sslmode = prefer
;server_tls_ca_file = 
;server_tls_key_file = 
;server_tls_cert_file = 
;server_tls_protocols = secure
;server_tls_ciphers = normal

; TLS support disabled for client connections (handled by load balancer)
;client_tls_sslmode = prefer
;client_tls_ca_file = 
;client_tls_key_file = 
;client_tls_cert_file = 
;client_tls_protocols = secure
;client_tls_ciphers = normal

;;;
;;; Dangerous timeouts
;;;

; Query time limit - queries running longer than this are cancelled
query_timeout = 120

; Query waiting time limit - if a query waits longer than this, it is cancelled
query_wait_timeout = 120

; Maximum time to spend waiting for connection from the pool
client_idle_timeout = 0

; When server connection is released back to pool:
;   0 - (default) writethrough - tx must be committed
;   1 - writethrough after flush - tx must be committed and flushed
;   2 - writethrough after sync - tx must be committed and synced
server_check_delay = 30

;;;
;;; Low-level network settings
;;;

; Buffer for streaming packets
pkt_buf = 4096

; Max packet size that can be sent at once
max_packet_size = 2147483647

; TCP settings
listen_backlog = 128
tcp_defer_accept = 1
tcp_socket_buffer = 0
tcp_keepalive = 1
tcp_keepcnt = 9
tcp_keepidle = 7200
tcp_keepintvl = 75

;;;
;;; DeFi-specific optimizations
;;;

; Reduce latency for transaction-heavy workloads
server_fast_close = 1

; Application name to help with monitoring
application_name_add_host = 1

; Track when clients disconnect
track_extra_parameters = IntervalStyle,search_path

;;;
;;; Statistics
;;;

; Period for updating aggregated stats
stats_period = 60

; Comma-separated list of users who are allowed to use SHOW commands on the admin console
stats_users = postgres, yieldsensei_admin

;;;
;;; Pooler personality questions
;;;

; When server connection is released back to pool:
; session      - server is released back to pool after client disconnects
; transaction  - server is released back to pool after transaction finishes
; statement    - server is released back to pool after query finishes
pool_mode = transaction

; Query for checking if server is alive
server_check_query = SELECT 1

; Interval for running server_check_query
server_check_delay = 30

; If disabled, use SO_REUSEPORT to distribute connections between processes
so_reuseport = 1

; Unix socket settings (disabled in container environment)
;unix_socket_dir = /tmp
;unix_socket_mode = 0777
;unix_socket_group = 

;;;
;;; Authentication settings
;;;

; Authentication type: any, trust, plain, md5, scram-sha-256
auth_type = md5

; File containing usernames and passwords
auth_file = /etc/pgbouncer/userlist.txt

; Query to use to fetch password from database
; auth_query = SELECT usename, passwd FROM pg_shadow WHERE usename=$1

; HBA file for client authentication (optional)
; auth_hba_file = /etc/pgbouncer/pg_hba.conf

;;;
;;; Users allowed to use admin console
;;;

; Comma-separated list of admin users
admin_users = postgres

; Comma-separated list of users who are allowed to use SHOW commands on the admin console
stats_users = postgres, yieldsensei_app

;;;
;;; Pooler process settings
;;;

; If non-zero then create pidfile
pidfile = /var/run/pgbouncer/pgbouncer.pid

;;;
;;; Include other config files
;;;

; Include additional configuration files
;%include /etc/pgbouncer/pgbouncer-local.ini 