name: Secret Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'sync'
        type: choice
        options:
          - sync
          - rotate
          - validate
          - audit
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      secrets_list:
        description: 'Comma-separated list of secrets (optional)'
        required: false
        type: string
      dry_run:
        description: 'Dry run mode (no actual changes)'
        required: false
        type: boolean
        default: false
  
  schedule:
    # Run secret validation daily at 2 AM UTC
    - cron: '0 2 * * *'
  
  push:
    paths:
      - 'src/config/secrets/**'
      - '.github/workflows/secret-management.yml'
    branches:
      - main
      - develop

jobs:
  secret-validation:
    name: Validate Secret Configuration
    runs-on: ubuntu-latest
    outputs:
      validation-passed: ${{ steps.validate.outputs.result }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Validate secret configuration
        id: validate
        run: |
          echo "üîç Validating secret management configuration..."
          
          # Set environment variables
          export NODE_ENV=${{ github.event.inputs.environment || 'development' }}
          export CICD_PLATFORM=github
          export PROJECT_ID=${{ github.repository }}
          
          # Run validation
          if npm run secrets:validate; then
            echo "result=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Secret configuration validation passed"
          else
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "‚ùå Secret configuration validation failed"
            exit 1
          fi
        env:
          VAULT_ENCRYPTION_KEY: ${{ secrets.VAULT_ENCRYPTION_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  secret-management:
    name: Manage Secrets
    runs-on: ubuntu-latest
    needs: secret-validation
    if: github.event_name == 'workflow_dispatch' && needs.secret-validation.outputs.validation-passed == 'success'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup environment
        run: |
          echo "NODE_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          echo "CICD_PLATFORM=github" >> $GITHUB_ENV
          echo "PROJECT_ID=${{ github.repository }}" >> $GITHUB_ENV
          echo "DRY_RUN=${{ github.event.inputs.dry_run }}" >> $GITHUB_ENV
          
      - name: Initialize secret manager
        run: |
          echo "üîß Initializing secret management system..."
          npm run secrets:init --if-present
        env:
          VAULT_ENCRYPTION_KEY: ${{ secrets.VAULT_ENCRYPTION_KEY }}
          
      - name: Sync secrets
        if: github.event.inputs.action == 'sync'
        run: |
          echo "üîÑ Syncing secrets to ${{ github.event.inputs.environment }} environment..."
          
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            npm run secrets:sync -- --dry-run
          else
            npm run secrets:sync
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VAULT_ENCRYPTION_KEY: ${{ secrets.VAULT_ENCRYPTION_KEY }}
          
      - name: Rotate secrets
        if: github.event.inputs.action == 'rotate'
        run: |
          echo "üîÑ Rotating secrets in ${{ github.event.inputs.environment }} environment..."
          
          if [[ -n "${{ github.event.inputs.secrets_list }}" ]]; then
            if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
              npm run secrets:rotate -- --secrets "${{ github.event.inputs.secrets_list }}" --dry-run
            else
              npm run secrets:rotate -- --secrets "${{ github.event.inputs.secrets_list }}"
            fi
          else
            if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
              npm run secrets:rotate -- --all --dry-run
            else
              npm run secrets:rotate -- --all
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VAULT_ENCRYPTION_KEY: ${{ secrets.VAULT_ENCRYPTION_KEY }}
          
      - name: Validate secrets
        if: github.event.inputs.action == 'validate'
        run: |
          echo "üîç Validating secrets configuration..."
          npm run secrets:validate
        env:
          VAULT_ENCRYPTION_KEY: ${{ secrets.VAULT_ENCRYPTION_KEY }}
          
      - name: Generate audit report
        if: github.event.inputs.action == 'audit' || github.event.inputs.action == 'sync' || github.event.inputs.action == 'rotate'
        run: |
          echo "üìä Generating audit report..."
          npm run secrets:audit -- --format markdown --output ./secret-audit-report.md
        env:
          VAULT_ENCRYPTION_KEY: ${{ secrets.VAULT_ENCRYPTION_KEY }}
          
      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secret-audit-report-${{ github.event.inputs.environment || 'scheduled' }}
          path: |
            secret-audit-report.md
            secret-audit-report.json
          retention-days: 90
          
      - name: Comment on PR with audit results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './secret-audit-report.md';
            
            if (fs.existsSync(path)) {
              const report = fs.readFileSync(path, 'utf8');
              const comment = `## üîê Secret Management Audit Report
              
              **Environment:** ${{ github.event.inputs.environment || 'validation' }}
              **Action:** ${{ github.event.inputs.action || 'validation' }}
              **Triggered by:** ${{ github.actor }}
              
              <details>
              <summary>üìä Full Audit Report</summary>
              
              \`\`\`markdown
              ${report}
              \`\`\`
              
              </details>
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  scheduled-validation:
    name: Scheduled Secret Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    strategy:
      matrix:
        environment: [development, staging, production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Validate secrets for ${{ matrix.environment }}
        run: |
          echo "üîç Scheduled validation for ${{ matrix.environment }} environment..."
          
          export NODE_ENV=${{ matrix.environment }}
          export CICD_PLATFORM=github
          export PROJECT_ID=${{ github.repository }}
          
          npm run secrets:validate
        env:
          VAULT_ENCRYPTION_KEY: ${{ secrets.VAULT_ENCRYPTION_KEY }}
          
      - name: Generate status report
        if: always()
        run: npm run secrets:status
        env:
          VAULT_ENCRYPTION_KEY: ${{ secrets.VAULT_ENCRYPTION_KEY }}
          
      - name: Notify on validation failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Secret Validation Failed - ${{ matrix.environment }}`,
              body: `## Secret Validation Failure
              
              **Environment:** ${{ matrix.environment }}
              **Time:** ${new Date().toISOString()}
              **Workflow:** ${context.workflow}
              **Run ID:** ${context.runId}
              
              The scheduled secret validation has failed for the ${{ matrix.environment }} environment.
              
              ### Next Steps:
              1. Check the workflow logs for specific error details
              2. Verify secret configuration integrity
              3. Run manual validation: \`npm run secrets:validate -- --environment ${{ matrix.environment }}\`
              4. Fix any identified issues
              5. Re-run validation to confirm fixes
              
              **Workflow Link:** [View Logs](${context.payload.repository.html_url}/actions/runs/${context.runId})
              `,
              labels: ['secret-management', 'validation-failure', 'priority-high']
            });

  security-compliance:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Security compliance audit
        run: |
          echo "üîí Running security compliance audit..."
          
          # Check for hardcoded secrets in code
          echo "Scanning for potential secrets in codebase..."
          if grep -r -E "(password|secret|key|token)\s*[:=]\s*['\"][^'\"]{8,}" src/ --exclude-dir=node_modules || true; then
            echo "‚ö†Ô∏è Potential hardcoded secrets detected - review required"
          fi
          
          # Validate encryption standards
          npm run secrets:validate -- --secrets-only
          
          # Generate compliance report
          npm run secrets:audit -- --format json --output compliance-report.json
        env:
          VAULT_ENCRYPTION_KEY: ${{ secrets.VAULT_ENCRYPTION_KEY }}
          
      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: security-compliance-report
          path: compliance-report.json
          retention-days: 365

  cleanup:
    name: Cleanup and Maintenance
    runs-on: ubuntu-latest
    if: always() && needs.secret-management.result
    needs: [secret-validation, secret-management]
    
    steps:
      - name: Cleanup temporary files
        run: |
          echo "üßπ Performing cleanup..."
          # Remove any temporary files that might contain sensitive data
          find /tmp -name "*secret*" -type f -delete 2>/dev/null || true
          find /tmp -name "*vault*" -type f -delete 2>/dev/null || true
          
      - name: Summary report
        run: |
          echo "üìã Secret Management Workflow Summary"
          echo "======================================"
          echo "Validation: ${{ needs.secret-validation.result }}"
          echo "Management: ${{ needs.secret-management.result }}"
          echo "Environment: ${{ github.event.inputs.environment || 'N/A' }}"
          echo "Action: ${{ github.event.inputs.action || 'validation' }}"
          echo "Triggered by: ${{ github.actor }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"