name: Sage Satellite Testing Suite

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/satellites/sage/**'
      - 'tests/satellites/sage/**'
      - '.github/workflows/sage-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/satellites/sage/**'
      - 'tests/satellites/sage/**'
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - performance
          - validation

jobs:
  unit-tests:
    if: ${{ github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:sage:unit
        env:
          NODE_ENV: test
          ENABLE_ML_TESTS: false
          ENABLE_PERFORMANCE_TESTS: false
          ENABLE_INTEGRATION_TESTS: false
      
      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sage-unit-test-results-node-${{ matrix.node-version }}
          path: |
            coverage/sage/sage-test-results.json
            coverage/sage/sage-component-reports.json
            coverage/sage/sage-junit-report.xml
          retention-days: 7

  integration-tests:
    if: ${{ github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run integration tests
        run: npm run test:sage:integration
        env:
          NODE_ENV: test
          ENABLE_ML_TESTS: true
          ENABLE_PERFORMANCE_TESTS: false
          ENABLE_INTEGRATION_TESTS: true
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
      
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sage-integration-test-results
          path: |
            coverage/sage/sage-test-results.json
            coverage/sage/sage-component-reports.json
            coverage/sage/html-report/
          retention-days: 7

  performance-tests:
    if: ${{ github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run performance tests
        run: npm run test:sage:performance
        env:
          NODE_ENV: test
          ENABLE_ML_TESTS: false
          ENABLE_PERFORMANCE_TESTS: true
          ENABLE_INTEGRATION_TESTS: false
          ENABLE_LOAD_TESTS: true
      
      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sage-performance-test-results
          path: |
            coverage/sage/sage-test-results.json
            coverage/sage/sage-dashboard-data.json
            coverage/sage/sage-trends.json
          retention-days: 30

  validation-tests:
    if: ${{ github.event.inputs.test_type == 'validation' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run validation tests
        run: npm run test:sage:validation
        env:
          NODE_ENV: test
          ENABLE_ML_TESTS: true
          ENABLE_PERFORMANCE_TESTS: false
          ENABLE_INTEGRATION_TESTS: true
      
      - name: Upload validation test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sage-validation-test-results
          path: |
            coverage/sage/sage-test-results.json
            coverage/sage/sage-component-reports.json
          retention-days: 7

  comprehensive-tests:
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [unit-tests, integration-tests, performance-tests, validation-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run comprehensive test suite
        run: npm run test:sage:all
        env:
          NODE_ENV: test
          ENABLE_ML_TESTS: true
          ENABLE_PERFORMANCE_TESTS: true
          ENABLE_INTEGRATION_TESTS: true
          ENABLE_LOAD_TESTS: true
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
          LOG_TEST_METRICS: true
      
      - name: Generate comprehensive report
        run: npm run test:sage:report
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage/sage
          flags: sage-satellite
          name: sage-satellite-coverage
      
      - name: Upload comprehensive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sage-comprehensive-test-results
          path: |
            coverage/sage/
          retention-days: 30
      
      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './coverage/sage/sage-test-summary.json';
            
            if (fs.existsSync(path)) {
              const summary = JSON.parse(fs.readFileSync(path, 'utf8'));
              
              const comment = `## 🧪 Sage Satellite Test Results
              
              ### Overall Results
              - **Total Tests**: ${summary.overall.totalTests}
              - **Passed**: ${summary.overall.passedTests} ✅
              - **Failed**: ${summary.overall.failedTests} ${summary.overall.failedTests > 0 ? '❌' : '✅'}
              - **Pass Rate**: ${summary.overall.passRate.toFixed(1)}%
              
              ### Coverage
              - **Statements**: ${summary.coverage.statements?.toFixed(1) || 0}%
              - **Branches**: ${summary.coverage.branches?.toFixed(1) || 0}%
              - **Functions**: ${summary.coverage.functions?.toFixed(1) || 0}%
              - **Lines**: ${summary.coverage.lines?.toFixed(1) || 0}%
              
              ### Performance
              - **Average Test Duration**: ${(summary.performance.averageTestDuration || 0).toFixed(0)}ms
              - **Performance Score**: ${summary.performance.performanceScore || 'N/A'}/100
              
              ### Components Tested
              ${Object.entries(summary.components || {}).map(([name, comp]) => 
                `- **${name}**: ${comp.passed}/${comp.tests} tests passed (${((comp.passed / comp.tests) * 100).toFixed(1)}%)`
              ).join('\n')}
              
              ---
              *Test run completed at ${summary.timestamp}*`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run security audit
        run: npm audit --audit-level moderate
      
      - name: Check for known vulnerabilities
        run: |
          npx audit-ci --moderate