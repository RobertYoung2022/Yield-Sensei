name: üîí Type Safety & Quality Control

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, develop, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  TYPE_COVERAGE_THRESHOLD: 85
  MAX_ANY_TYPES: 50

jobs:
  type-safety-matrix:
    name: TypeScript Type Safety
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        typescript-version: ['~5.4.0', 'latest']
      fail-fast: false
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: üîß Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: üì¶ Install dependencies
        run: npm ci
        
      - name: üîÑ Install TypeScript ${{ matrix.typescript-version }}
        run: |
          if [ "${{ matrix.typescript-version }}" = "latest" ]; then
            npm install --no-save typescript@latest
          else
            npm install --no-save typescript@${{ matrix.typescript-version }}
          fi
          
      - name: üìä Environment info
        run: |
          echo "TypeScript version:"
          npx tsc --version
          echo "Node version:"
          node --version
          
      - name: üîç Basic TypeScript compilation
        run: npm run typecheck
        
      - name: üîí Strict TypeScript validation
        run: npm run typecheck:strict
        continue-on-error: true
        id: strict-check
        
      - name: üèóÔ∏è Build compilation check
        run: npm run typecheck:build
        continue-on-error: true
        id: build-check
        
      - name: üìä Type coverage analysis
        run: npm run type-coverage:check
        continue-on-error: true
        id: coverage-check
        
      - name: üî¨ Progressive type validation
        run: npm run type-validate:progressive --verbose
        continue-on-error: true
        id: progressive-check
        
      - name: üßπ ESLint type-aware rules
        run: npm run lint
        continue-on-error: true

  type-error-analysis:
    name: Type Error Analysis & Reporting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì¶ Install dependencies
        run: npm ci
        
      - name: üìä Analyze type error patterns
        run: |
          echo "## üìä Type Error Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count specific error patterns
          TS4111_COUNT=$(npm run typecheck 2>&1 | grep -c "TS4111" || echo "0")
          TS6133_COUNT=$(npm run typecheck 2>&1 | grep -c "TS6133" || echo "0")
          TS7030_COUNT=$(npm run typecheck 2>&1 | grep -c "TS7030" || echo "0")
          TS2379_COUNT=$(npm run typecheck 2>&1 | grep -c "TS2379" || echo "0")
          TS2339_COUNT=$(npm run typecheck 2>&1 | grep -c "TS2339" || echo "0")
          
          echo "| Error Pattern | Count | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|-------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| TS4111 | $TS4111_COUNT | Index signature access |" >> $GITHUB_STEP_SUMMARY
          echo "| TS6133 | $TS6133_COUNT | Unused parameters |" >> $GITHUB_STEP_SUMMARY
          echo "| TS7030 | $TS7030_COUNT | Missing return statements |" >> $GITHUB_STEP_SUMMARY
          echo "| TS2379 | $TS2379_COUNT | Exact optional properties |" >> $GITHUB_STEP_SUMMARY
          echo "| TS2339 | $TS2339_COUNT | Property access on never |" >> $GITHUB_STEP_SUMMARY
          
          # Total error count
          TOTAL_ERRORS=$(npm run typecheck 2>&1 | grep -c "error TS" || echo "0")
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total TypeScript errors:** $TOTAL_ERRORS" >> $GITHUB_STEP_SUMMARY
          
          # Set outputs for other jobs
          echo "total_errors=$TOTAL_ERRORS" >> $GITHUB_OUTPUT
          echo "ts4111_count=$TS4111_COUNT" >> $GITHUB_OUTPUT
          echo "ts6133_count=$TS6133_COUNT" >> $GITHUB_OUTPUT
        id: error-analysis
        continue-on-error: true
        
      - name: üîç Analyze 'any' type usage
        run: |
          ANY_COUNT=$(find src -name "*.ts" -exec grep -c ": any\|= any\| any\[\]\|<any>" {} + | awk '{sum += $1} END {print sum}' || echo "0")
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**'any' type usage:** $ANY_COUNT instances" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** ‚â§${{ env.MAX_ANY_TYPES }} instances" >> $GITHUB_STEP_SUMMARY
          
          if [ "$ANY_COUNT" -gt "${{ env.MAX_ANY_TYPES }}" ]; then
            echo "‚ö†Ô∏è **Status:** Above target threshold" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **Status:** Within acceptable range" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "any_count=$ANY_COUNT" >> $GITHUB_OUTPUT
        id: any-analysis
        continue-on-error: true

  type-coverage-report:
    name: Type Coverage & Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì¶ Install dependencies
        run: npm ci
        
      - name: üìä Generate type coverage report
        run: |
          npm run type-coverage -- --detail > type-coverage-report.txt 2>&1 || true
          COVERAGE=$(npm run type-coverage 2>&1 | grep -o '[0-9]*\.[0-9]*% type coverage' | grep -o '[0-9]*\.[0-9]*' || echo "0")
          
          echo "## üìä Type Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Current Coverage:** ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          echo "**Target Coverage:** ${{ env.TYPE_COVERAGE_THRESHOLD }}%" >> $GITHUB_STEP_SUMMARY
          
          if (( $(echo "$COVERAGE >= ${{ env.TYPE_COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "‚úÖ **Status:** Target achieved" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Status:** Below target" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        id: coverage-check
        continue-on-error: true
        
      - name: üìã Generate comprehensive validation report
        run: npm run type-validate:report
        continue-on-error: true
        
      - name: üìÅ Upload type reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: type-reports
          path: |
            type-coverage-report.txt
            reports/type-validation.json
          retention-days: 30

  security-quality-checks:
    name: Security & Quality Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì¶ Install dependencies
        run: npm ci
        
      - name: üîí Security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
        
      - name: üßπ Code formatting check
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,md}"
        continue-on-error: true
        
      - name: üîç Check for console.log statements
        run: |
          CONSOLE_COUNT=$(grep -r "console\.log" src/ --include="*.ts" --include="*.tsx" | wc -l || echo "0")
          echo "Console.log statements found: $CONSOLE_COUNT"
          if [ "$CONSOLE_COUNT" -gt 10 ]; then
            echo "‚ö†Ô∏è Too many console.log statements ($CONSOLE_COUNT). Consider using proper logging."
          fi
        continue-on-error: true

  pr-requirements:
    name: PR Type Safety Requirements
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [type-safety-matrix, type-error-analysis, type-coverage-report]
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì¶ Install dependencies
        run: npm ci
        
      - name: ‚úÖ Validate PR requirements
        run: |
          echo "## ‚úÖ PR Type Safety Requirements" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Basic compilation is required
          if npm run typecheck; then
            echo "‚úÖ **Basic TypeScript compilation**: PASSED" >> $GITHUB_STEP_SUMMARY
            BASIC_PASSED=true
          else
            echo "‚ùå **Basic TypeScript compilation**: FAILED" >> $GITHUB_STEP_SUMMARY
            BASIC_PASSED=false
          fi
          
          # Check for new 'any' types in diff
          if git diff origin/main...HEAD --name-only | grep -E '\.(ts|tsx)$' > /dev/null; then
            if git diff origin/main...HEAD | grep -E '\+.*: any|\+.*= any' > /dev/null; then
              echo "‚ö†Ô∏è **New 'any' types detected**: Please use specific types" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚úÖ **No new 'any' types**: PASSED" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ÑπÔ∏è **No TypeScript files changed**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "$BASIC_PASSED" = "true" ]; then
            echo "‚úÖ **Overall Status**: PR meets type safety requirements" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Overall Status**: PR fails type safety requirements" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  type-safety-summary:
    name: Type Safety Summary
    runs-on: ubuntu-latest
    needs: [type-safety-matrix, type-error-analysis, type-coverage-report, security-quality-checks]
    if: always()
    
    steps:
      - name: üìä Generate summary
        run: |
          echo "## üîí Type Safety Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          MATRIX_RESULT="${{ needs.type-safety-matrix.result }}"
          ANALYSIS_RESULT="${{ needs.type-error-analysis.result }}"
          COVERAGE_RESULT="${{ needs.type-coverage-report.result }}"
          SECURITY_RESULT="${{ needs.security-quality-checks.result }}"
          
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| TypeScript Matrix Tests | ${MATRIX_RESULT} |" >> $GITHUB_STEP_SUMMARY
          echo "| Error Analysis | ${ANALYSIS_RESULT} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type Coverage | ${COVERAGE_RESULT} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security & Quality | ${SECURITY_RESULT} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$MATRIX_RESULT" = "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ **Type safety pipeline completed successfully**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ùå **Type safety pipeline encountered issues**" >> $GITHUB_STEP_SUMMARY
          fi